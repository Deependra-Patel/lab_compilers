##SymbolTable::# Function Name: isDivisible#Return Type: Kind: 0#Basetype: 0#Size: 4##Printing parameters: #i => Offset: 8#Kind: 0#Basetype: 0#Size: 4###num => Offset: 4#Kind: 0#Basetype: 0#Size: 4####Printing local variables: #fart => Offset: -4#Kind: 0#Basetype: 0#Size: 4###j => Offset: -8#Kind: 0#Basetype: 0#Size: 4###printing: (Block [(For (ASSIGN (Identifier j) (Identifier i)) (LE_OP_INT (Identifier j) (Identifier num)) (ASSIGN (Identifier j) (PLUS_INT (Identifier j) (Identifier i))) (Block [(If (EQ_OP_INT (Identifier j) (Identifier num)) (Block [(Return (IntConst 1))]) (Block [(Ass (Identifier fart) (IntConst 1))]))])) (Return (IntConst 0))])(ASSIGN (Identifier j) (Identifier i))
##SymbolTable::# Function Name: isPrime#Return Type: Kind: 0#Basetype: 0#Size: 4##Printing parameters: #i => Offset: 8#Kind: 0#Basetype: 0#Size: 4###num => Offset: 4#Kind: 0#Basetype: 0#Size: 4####Printing local variables: #printing: (Block [(If (EQ_OP_INT (Identifier i) (IntConst 1)) (Block [(Return (IntConst 1))]) (Block [(If (EQ_OP_INT (Funcall (Identifier isDivisible) (Identifier num) (Identifier i)) (IntConst 1)) (Block [(Return (IntConst 0))]) (Block [(Return (Funcall (Identifier isPrime) (Identifier num) (MINUS_INT (Identifier i) (IntConst 1))))]))]))])getting
